# This workflow will build and push a new container image to Amazon ECR

on:
  pull_request:
  push:
    branches: ["feature/deployment"]

name: Deploy to ECR - staging

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest

    # uses GitHub environment
    environment:
      name: Staging
      url: "http://staging-analytics.plio.in"

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      # sets the AWS credentials for use in next steps. This hooks comes with a post-hook as well that clears these keys once workflow ends.
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # log into ECR using the AWS credentials
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      # build the docker image and push to Elastic Container Registry.
      # Sets the name of the image as output to be used in further steps.
      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: plio-analytics-staging
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Build a docker container and push it to ECR
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG  .
          echo "Pushing image to ECR..."
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
